var searchIndex = JSON.parse('{\
"common":{"doc":"","t":"NNNENNDLLLLLLLLLLLLLLLLLLLLLMMMMMM","n":["Abort","Cut","Launch","Message","Telemetry","Update","Vec3","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","fmt","fmt","from","from","into","into","serialize","serialize","try_from","try_from","try_from","try_into","try_into","type_id","type_id","x","y","z","acceleration","gps","temperature"],"q":[[0,"common"],[31,"common::Message"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[4,4,4,0,4,4,0,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,4,2,4,2,4,2,2,2,11,11,11],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[1,[[3,[4]]]],[[2,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[[2,7],3],[[4,7],3],[[],3],[[[9,[8]]],[[3,[4]]]],[[],3],[[],3],[[],3],[[],10],[[],10],0,0,0,0,0,0],"c":[],"p":[[8,"Deserializer"],[3,"Vec3"],[4,"Result"],[4,"Message"],[3,"Formatter"],[6,"Result"],[8,"Serializer"],[15,"u8"],[15,"slice"],[3,"TypeId"],[13,"Telemetry"]]},\
"ground":{"doc":"","t":"DDDDMLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFDMMLLLLLLLLDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLL","n":["MapToken","State","Telemetry","abort","acc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","launch","main","map_token","pos","radio","register","register","register","register","register","register","serialize","serialize","telemetry","temp","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ground"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,10,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,0,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,0,0,0,10,15,3,5,6,7,8,9,10,13,0,10,13,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,15,3,5,6,10,7,8,13,9,0,15,3,5,6,10,7,8,13,9],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],0,0,0,[[3,4]],[[5,4]],[[6,4]],[[7,4]],[[8,4]],[[9,4]],[[10,11],12],[[13,11],12],0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[15,"usize"],[6,"Result"],[3,"launch"],[3,"AppService"],[3,"abort"],[3,"cut"],[3,"telemetry"],[3,"update"],[3,"map_token"],[3,"Telemetry"],[8,"Serializer"],[4,"Result"],[3,"MapToken"],[3,"TypeId"],[3,"State"]]},\
"launch":{"doc":"","t":"F","n":["main"],"q":[[0,"launch"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"net":{"doc":"","t":"AAAAAAAADLLLLMLLLLLLLLMLDDLLLLLLLLLLLLLLLMLLLLMLLMMLLMFMMMMLLLLLLMLLLLLLLLLLNENNNLLLLLLLLLLLLLLLLAANNNNNNNNDENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLMLLLLLLLLLLLLLMLLLLMLMLLLLLLLLLLLLNNNNDENNNNNNNNDDDEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAANNNNNNNDENMMLLLLLMMMLLLLLLLMMLMLLLLLLMLMMMMMMLLLLLLLMLLLMDLLLMLLLLMLLLLMLMLLLLLLDDDILLLLLLMLLLLLLLLLLLMLLLLLMLLLLLLMLLLLMKMMLLLLLLLLLLLLFFFFFFFFF","n":["datagrams","device","interface","layer_3","layer_4","services","tools","dns","UdpDns","borrow","borrow_mut","deref","deref_mut","dns_parent","drop","from","init","into","new_request","try_from","try_into","type_id","udp_parent","vzip","Device","NetworkStream","add_listen_service","add_listen_service_without_port","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","dns_addr","drop","drop","from","from","iface","init","init","interface","interface_name","into","into","ip_addr","list_devices","name","ports","protocols","radio","recv","send","set_ip","start","stop_listen_service","stop_listen_service_without_port","stream","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ETHER","Interface","SDR","System","WLAN","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","from","init","into","to_owned","try_from","try_into","type_id","vzip","icmp","ipv4","AddressMaskReply","AddressMaskRequest","BadIPHeader","DestinationUnreachable","EchoReply","EchoRequest","ExtendedEchoReply","ExtendedEchoRequest","ICMPv4","IcmpTypes","InformationReply","InformationRequest","RedirectMessage","RouterAdvertisement","RouterSolicitation","SourceQuench","TimeExceeded","Timestamp","TimestampReply","Traceroute","Unassigned1","Unassigned19","Unassigned2","Unassigned20","Unassigned21","Unassigned22","Unassigned23","Unassigned24","Unassigned25","Unassigned26","Unassigned27","Unassigned28","Unassigned29","Unassigned31","Unassigned32","Unassigned33","Unassigned34","Unassigned35","Unassigned36","Unassigned37","Unassigned38","Unassigned39","Unassigned40","Unassigned41","Unassigned6","Unassigned7","borrow","borrow","borrow_mut","borrow_mut","calc_checksum","clone","clone","clone_into","clone_into","data","decode","deref","deref","deref_mut","deref_mut","drop","drop","encode","fmt","from","from","from_i64","from_u64","header","init","init","into","into","message_type","new","rest_of_header","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_checksum","verify","vzip","vzip","AFx0","AFx1","AFx2","AFx3","Address","AssuredForwarding","CS1","CS2","CS3","CS4","CS5","CS6","CS7","DF","DifferentiatedServices","ECN","Flags","IPPrecedence","IPV4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_checksum","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","destination_ip_address","differentiated_services_code_point","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","explicit_congestion_notification","flags","fmt","fmt","fmt","fmt","fragment_offset","from","from","from","from","from","from","from","from_i64","from_i64","from_str","from_u64","from_u64","get_assured_forwarding","get_data","get_ip_precedence","identification","init","init","init","init","init","init","init","into","into","into","into","into","into","into","is_congested","is_enabled","new","new","new","new","option","protocol","set_data","source_ip_address","time_to_live","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_length","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_checksum","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","tcp","udp","Ack","Cwr","Ece","Fin","Psh","Rst","Syn","TCPv4","TcpFlags","Urg","ack","ack_num","borrow","borrow","borrow_mut","borrow_mut","calc_checksum","cwr","data","data_offset","decode","deref","deref","deref_mut","deref_mut","drop","drop","dst_port","ece","encode","fin","from","from","init","init","into","into","ipv4","new","options","psh","rst","seq_num","src_port","syn","try_from","try_from","try_into","try_into","type_id","type_id","update_checksum","urg","verify","vzip","vzip","window_size","UDPv4","borrow","borrow_mut","calc_checksum","data","decode","deref","deref_mut","drop","dst_port","encode","from","init","into","ipv4","new","src_port","try_from","try_into","type_id","update_checksum","verify","vzip","DNS","Ping","PingStats","Service","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","completed","deref","deref","deref","deref_mut","deref_mut","deref_mut","disable","disable","drop","drop","drop","duration","enable","enable","from","from","from","hops","init","init","init","into","into","into","length","new","new","ping","ping","resp_addr","run_service","seq_num","seq_num","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","bin_char_arr_to_usize_unchecked","moving_average","normalize","run_commands","subtract_left_adjacent","sum_with_carries","u32_to_char_bin","u8_arr_to_u16_arr","u8s_to_u16"],"q":[[0,"net"],[7,"net::datagrams"],[8,"net::datagrams::dns"],[24,"net::device"],[76,"net::interface"],[97,"net::layer_3"],[99,"net::layer_3::icmp"],[188,"net::layer_3::ipv4"],[349,"net::layer_4"],[351,"net::layer_4::tcp"],[408,"net::layer_4::udp"],[431,"net::services"],[487,"net::tools"]],"d":["","","","","","","Get dependent crates","","UDP variant of the DNS protocol","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Generates a new request","","","","","","This is a instance of a device that can be connected to","This function streamlines using","Add a new service to listen on a given port number (Event …","Add a new service to listen on a given protocol (Event …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","List all device that could be connected to this computer","","","","","","","Set gateway and the IP address of this device","Start deice for sending/receiving traffic","Stop a service from listening on a given port number","Stop a service from listening fro a given protocol number","","","","","","","","","","","","Use ethernet","These are possible interfaces that could be present on a …","Use the connected Software Defined Radio","","Use wireless chip","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Deprecated","Deprecated","","","Response message","Request echo (standard)","","","Internet Control Message Protocol (ICMP) is also sometimes …","","Deprecated","Deprecated","","","","Deprecated","Time has exceeded","","","Deprecated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decode an array of u8 into a ICMP packet","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The header section of this packet","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","this isn’t uniform what is in here and often acts like …","","","","","","","","","","Verify the packet with the checksum","","","This doesn’t exist officially as this would just mean “…","Low Drop Probability - Highest order of priority of the …","Medium Drop Probability - Default, and preferred order of …","Highest Drop Probability - Lowest order of priority of the …","IPv4 IP address object","Assured Forwarding is the second half of the DifferServ …","Priority - Data that, if given the choice, should have …","Immediate - This is given higher precedence in …","Flash - Higher priority that should be given to RTSP or …","Flash-override - Named after the term when the President …","Critical - Highest priority given to non-networking …","<strong>(NETWORKING ONLY)</strong> Internet - A networking protocol only …","<strong>(NETWORKING ONLY)</strong> Networking - Look at yourself in the …","“Default” setting - Used for standard traffic.","","Explicit Congestion Notification (ECN) is a much more …","Flags configure data about fragmentation. If “don’t …","IP Precedence is considered “old” and was originally …","IPV4 datagram","","","","","","","","","","","","","","","Calculate checksum","","","","","","","","","","","","Take a u32 and return an address object","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert address to a u32 value","","Encodes the values set in the IPV4 header into bytes (for …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Convert string to IP address","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create ECN","Create ipv4 address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the packet checksum","verify header with checksum","","","","","","","","","","","","","","","","","IPv4 version of the TCP protocol. TCP is an OSI Layer 4 …","These are flags to specify the specifics of this packet","","","Acknowledgment number","","","","","This will calculate the checksum for this packet","","Data that is encapsulated in the packet","Tells where the data is (as header can have a dynamic …","decode an array of u8s into an tcp packet","","","","","","","The port number that the packet is to be sent to","","encode the data into a vector of u8s","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","IPv4 header","Create / initialize a tcp packet","options values","","","Sequence number","Port number that the packet originated from","","","","","","","","update the checksum of this packet (Needs to be done after …","","returns if this packet passes the checksum","","","Length of data the receiver is willing to get in return","IPv4 version of the UDP protocol. UDP is an OSI Layer 4 …","","","This will calculate the checksum for this packet","Data that is encapsulated in the packet","decode an array of u8s into an UDP packet","","","","The port number that the packet is to be sent to","encode the data into a vector of u8s","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","IPv4 header","Create / initialize a UDP packet","Port number that the packet originated from","","","","update the checksum of this packet (Needs to be done after …","returns if this packet passes the checksum","","","","This is a struct that holds the statistics about a ping …","This trait is what allows different services to run on …","","","","","","","Did this packet make it","","","","","","","This will stop the ping service on the network device …","This will stop the ping service on the network device …","","","","The amount of time it took to complete","This will start the ping service on the network device …","This will start the ping service on the network device …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The number of device it interacted with to send this ping …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of the packet (in bytes)","","","This will send a ping","This will send a ping","The request destination (or the response source) host ip","<strong>MUST BE THREAD SAFE</strong>","The packet sequence","","","","","","","","","","","","","","Although the format! macro does this for us, we sometimes …","Find the moving average of an array of numbers","Normalize values of an array of numbers","Run multiple commands seperated by enter keys on the system","Subtract values with the value to their left. This will …","Calculate sum of an array of u16s while adding carries to …","Although the format! macro does this for us, we sometimes …","Convert an array of u8s to an array of u16s","This will convert 2 u8s to a 16"],"i":[0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,8,8,8,8,12,8,12,8,12,8,12,8,12,8,12,8,8,12,8,12,12,8,12,8,8,8,12,8,0,8,8,8,12,12,12,8,8,8,8,8,8,12,8,12,8,12,8,12,8,12,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,20,20,20,20,20,20,20,20,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,19,20,19,19,20,19,20,19,19,19,20,19,20,19,20,19,19,20,20,19,20,20,19,20,19,20,19,19,19,19,20,19,20,19,20,19,20,19,19,19,20,19,28,28,28,28,0,0,29,29,29,29,29,29,29,29,0,0,0,0,0,44,32,2,28,29,30,27,44,32,2,28,29,30,27,27,2,28,29,30,27,2,28,29,30,27,32,2,30,27,27,44,32,2,28,29,30,27,44,32,2,28,29,30,27,27,27,44,32,2,28,29,30,27,32,2,30,27,27,27,2,28,29,30,27,44,32,2,28,29,30,27,28,29,2,28,29,30,27,30,27,44,32,2,28,29,30,27,44,32,2,28,29,30,27,32,32,32,2,30,27,27,27,27,27,27,2,28,29,30,27,2,27,44,32,2,28,29,30,27,44,32,2,28,29,30,27,44,32,2,28,29,30,27,27,27,44,32,2,28,29,30,27,0,0,36,36,36,36,36,36,36,0,0,36,35,35,36,35,36,35,35,35,35,35,35,36,35,36,35,36,35,35,35,35,35,36,35,36,35,36,35,35,35,35,35,35,35,35,35,36,35,36,35,36,35,35,35,35,36,35,35,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,40,38,39,40,38,39,40,40,38,39,40,38,39,38,39,40,38,39,40,38,39,40,38,39,40,40,38,39,40,38,39,40,38,39,38,39,40,9,40,38,40,38,39,40,38,39,40,38,39,40,38,39,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[1],0,[1],[[]],[[],1],[[]],0,[[],6],[[],6],[[],7],0,[[]],0,0,[[8,[10,[9]],3],11],[[8,[10,[9]],3],11],[8,8],[[]],[[]],[[]],[[]],[8,8],[12,12],[[]],[[]],[1],[1],[1],[1],0,[1],[1],[[]],[[]],0,[[],1],[[],1],0,0,[[]],[[]],0,[[],[[13,[8]]]],0,0,0,0,[[12,[15,[14]]],[[11,[1]]]],[[12,[15,[14]]],11],[[8,16,16],11],[8],[[8,3]],[[8,3]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,[[]],[[]],[17,17],[[]],[1],[1],[1],[[17,17],18],[[]],[[],1],[[]],[[]],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[19,3],[20,20],[19,19],[[]],[[]],0,[[[15,[14]]],[[11,[19]]]],[1],[1],[1],[1],[1],[1],[[19,18],[[13,[14]]]],[[20,21],22],[[]],[[]],[23,[[24,[20]]]],[25,[[24,[20]]]],0,[[],1],[[],1],[[]],[[]],0,[[20,14,2,2,26,[15,[14]]],19],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[19],[19,18],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,3],[2,2],[28,28],[29,29],[30,30],[27,27],[[]],[[]],[[]],[[]],[[]],[31,32],[26,2],[33,30],[[[15,[14]]],[[11,[27]]]],[[],27],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,[1],[1],[1],[1],[1],[1],[1],[32,31],[2,26],[30,33],[[27,18],[[13,[14]]]],0,0,[[2,21],22],[[28,21],22],[[29,21],22],[[30,21],22],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[24,[28]]]],[23,[[24,[29]]]],[16,[[11,[2]]]],[25,[[24,[28]]]],[25,[[24,[29]]]],[30,28],[27,[[13,[14]]]],[30,29],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,18],[32,18],[[18,18],32],[[14,14,14,14],2],[[29,28],30],[[[15,[14]],[15,[14]],30,32,3,34,14,14,26,26],27],0,0,[[27,[15,[14]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[],4],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[27],[27,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[35,3],0,0,0,[[[15,[14]]],[[11,[35]]]],[1],[1],[1],[1],[1],[1],0,0,[[35,18],[[13,[14]]]],0,[[]],[[]],[[],1],[[],1],[[]],[[]],0,[[2,3,2,3,[15,[14]],[15,[14]],[15,[36]],26,26,3,3],35],0,0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[35],0,[35,18],[[]],[[]],0,0,[[]],[[]],[37,3],0,[[[15,[14]]],[[11,[37]]]],[1],[1],[1],0,[[37,18],[[13,[14]]]],[[]],[[],1],[[]],0,[[2,3,2,3,[15,[14]]],37],0,[[],6],[[],6],[[],7],[37],[37,18],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[1],[1],[1],[1],[1],[38],[39],[1],[1],[1],0,[38],[39],[[]],[[]],[[]],0,[[],1],[[],1],[[],1],[[]],[[]],[[]],0,[8,38],[8,39],[[38,2],[[11,[40]]]],[[39,2],[[11,[40]]]],0,[[[15,[14]]],18],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[]],[[]],[[]],[41,1],[[[13,[42]],1],[[13,[42]]]],[[[13,[42]]],[[13,[42]]]],[16,4],[[[13,[42]]],[[13,[42]]]],[[[15,[3]]],3],[[26,1],[[13,[43]]]],[[[15,[14]]],[[13,[3]]]],[[[15,[14]]],3]],"c":[],"p":[[15,"usize"],[3,"Address"],[15,"u16"],[3,"String"],[3,"UdpDns"],[4,"Result"],[3,"TypeId"],[3,"Device"],[8,"Service"],[3,"Box"],[6,"Result"],[3,"NetworkStream"],[3,"Vec"],[15,"u8"],[15,"slice"],[15,"str"],[4,"Interface"],[15,"bool"],[3,"ICMPv4"],[4,"IcmpTypes"],[3,"Formatter"],[6,"Result"],[15,"i64"],[4,"Option"],[15,"u64"],[15,"u32"],[3,"IPV4"],[4,"AssuredForwarding"],[4,"IPPrecedence"],[3,"DifferentiatedServices"],[3,"u2"],[3,"ECN"],[3,"u6"],[3,"u13"],[3,"TCPv4"],[4,"TcpFlags"],[3,"UDPv4"],[3,"Ping"],[3,"DNS"],[3,"PingStats"],[3,"Chars"],[15,"f32"],[15,"char"],[3,"Flags"]]},\
"radio":{"doc":"This crate utilizes SDRs for long range communications …","t":"HNNNHHENDFLLLLFLLLLLLAALLLLLLFMLLLMAMALLLLLLMLLLLDDALLLLLLALLLLLLLLLLALLLLLLLLALLALLLLLLLLALLAAAHAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLAAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLAAHHAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLAAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLAAAAAFFFDLLLLLLLLLLLLLLLLLLFAARFFFFFFFFDDLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLMLLLLLLLLLLLLDDLMLLLLMLLLLLLMLLMLLLLMLLMMLLLLLLLLLLMMFF","n":["AMBLE","ASK","BPSK","FSK","IDENT","MOD_TYPE","ModulationType","QPSK","RadioStream","bits_per_symbol","borrow","borrow","borrow_mut","borrow_mut","demodulation","deref","deref","deref_mut","deref_mut","drop","drop","dsp","frame","from","from","init","init","into","into","modulation","modulation","new","read","receive_frames","rx_buffer","rx_handling","settings","tools","transmit","transmit_frame","try_from","try_from","try_into","try_into","tx_stream","type_id","type_id","vzip","vzip","Demodulators","Modulators","ask","ask","ask","borrow","borrow","borrow_mut","borrow_mut","bpsk","bpsk","bpsk","deref","deref","deref_mut","deref_mut","drop","drop","from","from","fsk","fsk","fsk","init","init","into","into","new","new","qpsk","qpsk","qpsk","tools","try_from","try_from","try_into","try_into","type_id","type_id","update","update","viterbi","vzip","vzip","demodulation_impl","modulation_impl","structs","ASK_FREQUENCY","demodulation","modulation","Demodulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","Modulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","structs","demodulation","modulation","Demodulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","Modulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","modulation_impl","structs","FSK_FREQUENCY1","FSK_FREQUENCY2","demodulation","modulation","Demodulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","Modulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","structs","demodulation","modulation","Demodulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","Modulation","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","run","try_from","try_into","type_id","vzip","bi_signal_demodulation","bi_signal_generation","generate_wave","goertzel_algorithm","noise_generators","bi_signal_demodulation","bi_signal_modulation","generate_wave","GoertzelAlgorithm","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","init","into","new","run","run_optimized","to_owned","try_from","try_into","type_id","vzip","gaussian_noise_generator","common","prelude","BIT_MASK","combine","eprint_bin","eprint_bytes_masked","eprint_diff","map_to","squish","state_to_bit","stretch","DecoderState","EncoderState","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decoders","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","fmt","fmt","from","from","from","init","init","into","into","new","push","push","push_return_bitpair","push_slice","push_slice","push_slice_para","read","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Frame","assemble","borrow","borrow_mut","data","deref","deref_mut","drop","from","from","init","into","new","try_from","try_into","type_id","vzip","RXLoop","WindowHandler","add","bit_counter","borrow","borrow","borrow_mut","borrow_mut","currently_recording","deref","deref","deref_mut","deref_mut","drop","drop","frame_len","from","from","ident","init","init","into","into","is_flipped","new","new","recording","recording_len","reset","run","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","window","window_flipped","bin_to_u8","u8_to_bin"],"q":[[0,"radio"],[49,"radio::dsp"],[93,"radio::dsp::ask"],[96,"radio::dsp::ask::modulation_impl"],[97,"radio::dsp::ask::structs"],[99,"radio::dsp::ask::structs::demodulation"],[114,"radio::dsp::ask::structs::modulation"],[129,"radio::dsp::bpsk"],[130,"radio::dsp::bpsk::structs"],[132,"radio::dsp::bpsk::structs::demodulation"],[147,"radio::dsp::bpsk::structs::modulation"],[162,"radio::dsp::fsk"],[164,"radio::dsp::fsk::modulation_impl"],[166,"radio::dsp::fsk::structs"],[168,"radio::dsp::fsk::structs::demodulation"],[183,"radio::dsp::fsk::structs::modulation"],[198,"radio::dsp::qpsk"],[199,"radio::dsp::qpsk::structs"],[201,"radio::dsp::qpsk::structs::demodulation"],[216,"radio::dsp::qpsk::structs::modulation"],[231,"radio::dsp::tools"],[236,"radio::dsp::tools::bi_signal_demodulation"],[237,"radio::dsp::tools::bi_signal_generation"],[238,"radio::dsp::tools::generate_wave"],[239,"radio::dsp::tools::goertzel_algorithm"],[258,"radio::dsp::tools::noise_generators"],[259,"radio::dsp::viterbi"],[261,"radio::dsp::viterbi::common"],[270,"radio::dsp::viterbi::prelude"],[314,"radio::frame"],[331,"radio::rx_handling"],[371,"radio::tools"]],"d":["This set of bits is sent ahead of the real transmission …","Amplitude Shift Keying (ASK) is a very basic modulation …","Binary Phase Shift Keying (BPSK) is a modulation type that …","Frequency Shift Keying (FSK) is a basic modulation type …","IDENT (AKA identifier) is a set of bits that allows the …","This is the current Modulation scheme that the radio is …","This is a list of different signal modulation types  …","Quadrature Phase Shift Keying (QPSK) is a modulation type …","Radio stream is the main class of the Radio crate. This …","This will return the number of bits being currently …","","","","","This is a helper function that makes it easy to change mod …","","","","","","","Digital Signal Processing (DSP) is the hallmark and a …","This file contains the Frame object struct and …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This is a helper function that makes it easy to change mod …","This is a pre-built modulation object that allows for …","This will create a new radio stream object.","This process samples read and return any data received","This is a wrapper class that allows for the reading and …","This is a thread safe buffer that the RX thread will fill …","This file holds RX operations and it’s various helper …","This is a saved copy of the radio settings that can be …","This file holds various functions and helper methods that …","This will transmit binary data to the radio","This a wrapper function that allows for direct …","","","","","The tx stream that data is passed to to have transmitted …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Demodulate a radio signal using ASK","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Modulate a radio signal using ASK","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Demodulate a radio signal using BPSK","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Modulate a radio signal using bpsk","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Demodulate a radio signal using FSK","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Modulate a radio signal using fsk","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Demodulate a radio signal using QPSK","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Modulate a radio signal using qpsk","","","","","","","","","","Demodulate a signal when when two signals are present","Modulate a signal when when two signals are present","Generate Complex Radio Wave","Goertzel’s Algorithm is a faster method of doing DFT …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Default calculation","Most cases the preferred option. This takes some liberty …","","","","","","This will add noise to a radio signal for testing","","","","combine s1 and s0 into the lower 2 bits of a u8","","","","Any input &gt;= 1 becomes the desired u8","Any input &gt;= 1 becomes 1","","Any input &gt;= 1 becomes 255 (aka <code>0b11111111</code>)","","represents the internal state of multiple encoders. (each …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","input a chunk to the encoder, updating state and returning …","does the same thing as input, but it combines the 2 bytes …","","","","","","","","","","","","","","The Frame design implemented here is CCSDS SDLP which is …","This will assemble the frame header and make it ready to …","","","this is the data that follows the frame header (the actual …","","","","Turn a string into frame segments (if any)","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new frame object given data the will be …","","","","","This object handles the logic of inbound signals in the RX …","This is a helper object that handles new bit(s) being …","This will add and process byte that is passed to it decide …","This is a counter that tells us what bit we’re on in the …","","","","","This is a bool that returns true if the IDENT was found …","","","","","","","This is the length of the frame extracted from the frame …","Returns the argument unchanged.","Returns the argument unchanged.","This is a bin array version of IDENT which is a binary …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This bool value returns true if the IDENT we recorded was …","This creates a new Window handler object that helps and …","This will create new RX loop by passing it the buffer that …","This is the array that holds the recording of the …","This is copy of the current index. Since the recording …","This will reset the the values to starting values and is …","This runs the logic for on loop and is called once per a …","","","","","","","","","This is the “view” that the radio has to find the …","This like window but all bits are flipped. This lets us …","binary string to u8 array","u8 array to binary string"],"i":[0,42,42,42,0,0,0,42,0,0,42,9,42,9,0,42,9,42,9,42,9,0,0,42,9,42,9,42,9,0,9,9,9,9,9,0,9,0,9,9,42,9,42,9,9,42,9,42,9,0,0,0,2,7,2,7,2,7,0,2,7,2,7,2,7,2,7,2,7,0,2,7,2,7,2,7,2,7,0,2,7,0,2,7,2,7,2,7,2,7,0,2,7,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,29,33,29,29,29,33,29,33,29,33,29,33,29,29,29,33,29,33,29,29,33,29,33,29,33,33,29,29,33,29,33,33,29,33,29,33,29,33,29,33,29,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,38,38,38,41,38,41,38,38,41,38,41,38,41,38,38,41,38,38,41,38,41,38,38,41,38,38,38,41,38,41,38,41,38,41,38,41,38,38,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[2,[5,[[4,[3]]]]],[[5,[1]]]],[6],[6],[6],[6],[6],[6],0,0,[[]],[[]],[[],6],[[],6],[[]],[[]],[[7,[8,[1]]],[[5,[[4,[3]]]]]],0,[[],[[10,[9]]]],[9,[[10,[[5,[1]]]]]],[9,[[10,[[5,[11]]]]]],0,0,0,0,[[9,[8,[1]]],10],[[9,11],10],[[],12],[[],12],[[],12],[[],12],0,[[],13],[[],13],[[]],[[]],0,0,0,[[2,[5,[[4,[3]]]]],[[5,[1]]]],[[7,[8,[1]]],[[5,[[4,[3]]]]]],[[]],[[]],[[]],[[]],0,[[2,[5,[[4,[3]]]]],[[5,[1]]]],[[7,[8,[1]]],[[5,[[4,[3]]]]]],[6],[6],[6],[6],[6],[6],[[]],[[]],0,[[2,[5,[[4,[3]]]]],[[5,[1]]]],[[7,[8,[1]]],[[5,[[4,[3]]]]]],[[],6],[[],6],[[]],[[]],[[6,3],2],[[6,3],7],0,[[2,[5,[[4,[3]]]]],[[5,[1]]]],[[7,[8,[1]]],[[5,[[4,[3]]]]]],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[2,6,3]],[[7,6,3]],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],14],[[14,[5,[[4,[3]]]]],[[5,[1]]]],[[],12],[[],12],[[],13],[[]],0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],15],[[15,[8,[1]]],[[5,[[4,[3]]]]]],[[],12],[[],12],[[],13],[[]],0,0,0,0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],16],[[16,[5,[[4,[3]]]]],[[5,[1]]]],[[],12],[[],12],[[],13],[[]],0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],17],[[17,[8,[1]]],[[5,[[4,[3]]]]]],[[],12],[[],12],[[],13],[[]],0,0,0,0,0,0,0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],18],[[18,[5,[[4,[3]]]]],[[5,[1]]]],[[],12],[[],12],[[],13],[[]],0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],19],[[19,[8,[1]]],[[5,[[4,[3]]]]]],[[],12],[[],12],[[],13],[[]],0,0,0,0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],20],[[20,[5,[[4,[3]]]]],[[5,[1]]]],[[],12],[[],12],[[],13],[[]],0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[6,3],21],[[21,[8,[1]]],[[5,[[4,[3]]]]]],[[],12],[[],12],[[],13],[[]],0,0,0,0,0,[[[8,[[4,[3]]]],22,3,6],[[5,[1]]]],[[[8,[1]],[8,[[4,[3]]]],[8,[[4,[3]]]],6],[[5,[[4,[3]]]]]],[[3,3,23,23,3,3,3],[[5,[[4,[3]]]]]],0,[[]],[[]],[22,22],[[]],[6],[6],[6],[[]],[[],6],[[]],[[3,3,3],22],[[22,[8,[[4,[3]]]]],3],[[22,[8,[[4,[3]]]]],3],[[]],[[],12],[[],12],[[],13],[[]],[[[8,[[4,[3]]]],3],[[10,[[5,[[4,[3]]]]]]]],0,0,0,[[1,1],1],[[[8,[1]],[25,[24]]]],[[[8,[1]],1]],[[[8,[1]],[8,[1]]]],[[1,1],1],[1,1],[[1,1],1],[1,1],0,0,[[]],[[]],[[]],[[]],[[[29,[[0,[26,27,28]]]]],[[29,[[0,[26,27,28]]]]]],[[]],0,[[],[[29,[[0,[30,27,28]]]]]],[6],[6],[6],[6],[6],[6],[[[29,[[0,[31,27,28]]]],[29,[[0,[31,27,28]]]]],32],[[],32],[[33,34],35],[[[29,[[0,[36,27,28]]]],34],35],[[]],[[]],[1,[[29,[1]]]],[[],6],[[],6],[[]],[[]],[6,33],[[33,1,1]],[[[29,[[0,[27,28]]]],[0,[27,28]]]],[[[29,[1]],1],1],[[33,[8,[1]]]],[[[29,[1]],[8,[1]]],[[5,[1]]]],[[33,[8,[1]]]],[33,[[5,[1]]]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]],0,[11,[[5,[1]]]],[[]],[[]],0,[6],[6],[6],[[[5,[37]]],[[5,[11]]]],[[]],[[],6],[[]],[[[8,[1]]],11],[[],12],[[],12],[[],13],[[]],0,0,[[38,[8,[1]]]],0,[[]],[[]],[[]],[[]],0,[6],[6],[6],[6],[6],[6],0,[[]],[[]],0,[[],6],[[],6],[[]],[[]],0,[24,38],[[[40,[[39,[[5,[[5,[1]]]]]]]]],41],0,0,[38],[[41,38]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]],0,0,[24,[[5,[1]]]],[[[8,[1]]],37]],"c":[],"p":[[15,"u8"],[3,"Demodulators"],[15,"f32"],[3,"Complex"],[3,"Vec"],[15,"usize"],[3,"Modulators"],[15,"slice"],[3,"RadioStream"],[6,"Result"],[3,"Frame"],[4,"Result"],[3,"TypeId"],[3,"Demodulation"],[3,"Modulation"],[3,"Demodulation"],[3,"Modulation"],[3,"Demodulation"],[3,"Modulation"],[3,"Demodulation"],[3,"Modulation"],[3,"GoertzelAlgorithm"],[15,"i32"],[15,"str"],[4,"Option"],[8,"Clone"],[8,"BitXor"],[8,"Copy"],[3,"EncoderState"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"DecoderState"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"String"],[3,"WindowHandler"],[3,"RwLock"],[3,"Arc"],[3,"RXLoop"],[4,"ModulationType"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
