/** @typedef {typeof __propDef.props}  GeocoderProps */
/** @typedef {typeof __propDef.events}  GeocoderEvents */
/** @typedef {typeof __propDef.slots}  GeocoderSlots */
export default class Geocoder extends SvelteComponentTyped<{
    accessToken: any;
    geocoder: any;
    value?: any;
    version?: string;
    customStylesheetUrl?: boolean;
    options?: {};
    types?: string[];
    placeholder?: string;
}, {
    results: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    result: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    loading: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    error: ErrorEvent;
    clear: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    load: Event;
    ready: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}> {
}
export type GeocoderProps = typeof __propDef.props;
export type GeocoderEvents = typeof __propDef.events;
export type GeocoderSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        accessToken: any;
        geocoder: any;
        value?: any;
        version?: string;
        customStylesheetUrl?: boolean;
        options?: {};
        types?: string[];
        placeholder?: string;
    };
    events: {
        results: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        result: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        loading: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        error: ErrorEvent;
        clear: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        load: Event;
        ready: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
