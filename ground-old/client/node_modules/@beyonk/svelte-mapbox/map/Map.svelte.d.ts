/** @typedef {typeof __propDef.props}  MapProps */
/** @typedef {typeof __propDef.events}  MapEvents */
/** @typedef {typeof __propDef.slots}  MapSlots */
export default class Map extends SvelteComponentTyped<{
    accessToken: any;
    map?: any;
    style?: string;
    version?: string;
    customStylesheetUrl?: boolean;
    zoom?: number;
    getMap?: () => any;
    getMapbox?: () => any;
    center?: number[];
    zoomRate?: number;
    wheelZoomRate?: number;
    fitBounds?: (bbox: any, data?: {}) => void;
    flyTo?: (destination: any, data?: {}) => void;
    resize?: () => void;
    setCenter?: (coords: any, data?: {}) => void;
    setZoom?: (value: any, data?: {}) => void;
    addControl?: (control: any, position?: string) => void;
    options?: {};
}, {
    recentre: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    dragend: DragEvent;
    click: MouseEvent;
    zoomstart: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    zoom: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    zoomend: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
    drag: DragEvent;
    keydown: KeyboardEvent;
    ready: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> {
    get fitBounds(): (bbox: any, data?: {}) => void;
    get flyTo(): (destination: any, data?: {}) => void;
    get resize(): () => void;
    get setCenter(): (coords: any, data?: {}) => void;
    get setZoom(): (value: any, data?: {}) => void;
    get addControl(): (control: any, position?: string) => void;
    get getMap(): () => any;
    get getMapbox(): () => any;
}
export type MapProps = typeof __propDef.props;
export type MapEvents = typeof __propDef.events;
export type MapSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        accessToken: any;
        map?: any;
        style?: string;
        version?: string;
        customStylesheetUrl?: boolean;
        zoom?: number;
        getMap?: () => any;
        getMapbox?: () => any;
        center?: number[];
        zoomRate?: number;
        wheelZoomRate?: number;
        fitBounds?: (bbox: any, data?: {}) => void;
        flyTo?: (destination: any, data?: {}) => void;
        resize?: () => void;
        setCenter?: (coords: any, data?: {}) => void;
        setZoom?: (value: any, data?: {}) => void;
        addControl?: (control: any, position?: string) => void;
        options?: {};
    };
    events: {
        recentre: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        dragend: DragEvent;
        click: MouseEvent;
        zoomstart: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        zoom: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        zoomend: Event | ProgressEvent<EventTarget> | DragEvent | MouseEvent | UIEvent | ClipboardEvent | AnimationEvent | InputEvent | FocusEvent | CompositionEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent;
        drag: DragEvent;
        keydown: KeyboardEvent;
        ready: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export {};
